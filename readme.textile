h1. Rationale

The following is written with MooTools in mind however the Promises
library has few requirments, it would be quite simple to port it to
another JavaScript framework as long as the framework supports
user defined events.

To understand the rationale behind Promises let's look at a few
problems that crop in many AJAX programs. Imagine that you have six
resources on your web service: a, b, c, d, e, f. For simplicity's sake
let's imaginee that these are just json files with the following
format. For example a.json might look something like the following:

<code>
{data: "a"}
</code>

Now suppose that you want to make requests for all 6 resources and you
would like to produce the string "abcdef". If you've done some AJAX
programming the following requirements should be pretty clear.

1. You need some kind of accumulator to hold the final string.
2. The requests must be made in correct order for the correct string
   to be produced.

You code will look something like the following:

  function get(rsrc, callback) 
  {
    new Request({
      method: 'get',
      url: rsrc+'.json',
      onComplete: callback
    }).send();
  }

  var result = '';
  get('a', function(response) {
    result += JSON.decode(response).data;
    get('b', function(response) {
      result += JSON.decode(response).data;
      get('c', function(response) {
        result += JSON.decode(response).data;
        get('d', function(response) {
          result += JSON.decode(response).data;
          get('e', function(response) {
            result += JSON.decode(response).data;
            get('f', function(response) {
              result += JSON.decode(response).data;
              console.log(result);
            });
          });
        });
      });
    });
  });

Wow this is not very pretty. Before moving on, consider how we would
write this logic if we were not making asynchronous requests:
      
  function get(rsrc)
  {
    return rsrc;    
  }

  function add(a, b)
  {
    return a + b;
  }

  var result = add(get("a"), 
                   add(get("b"), 
                       add(get("c"), 
                           add(get("d"), 
                               add(get("e"), get("f"))))));

Clearly you don't need such a long winded style if you just want to
add some characters together.  But imagine that add is a function that
combines two value of two resources in an interesting way.  In
anycase, while this is considerably easier on the eyes, for the most
part this doesn't look so much different structurally than the request
version.

Some might argue that you should handle this scenario with a bulk
operations API. That's like arguing that an OpenGL FFI should support
bulk operations- you're simply moving the complexity to the
server-side code. It is not being eliminated.

You could use something like Clientcide's Request.Queue, but this
doesn't do what we want. We have to push Requests onto the queue in
the order we want them to execute. And we still need to create an
accumulator via a closure. Compare this to the example above
where the JavaScript definition of function argument evalution ensures
the proper order and no accumulator is required.

For a second example let's examine something a little more
sophisticated, this time let's first consider how we would like to
write it- that is, not in terms of requests. Assuming get and add are
as before:

  var a = get("a");
  var value1 = add(add(a, get("b")), add(add(get("c"), get("d")), a));
  var value2 = add(a, get("f"));

In this example, value1 should be "abcda", value2 should be "af". 

Converting this to a sequence of requests presents some
challenges. The simple (and least desirable solution) is to wait for
all the resources and basically put the final result together in last
resource request. Why is this bad?

1. This code cannot be decomposed. You have to use it as one big
   frozen block of functionality.
2. The computation of value2 must wait for value1!

You could wait for value a, and then put the computation of value1 and
value2 inside of the callback for the request for a. But suppose you
decide that you want to use the value of b in the computation of
value2 as well. Now you need to wait for a and b. In MooTools this can
be accomplished with the Groups class. But this also means you'll
need to change get to not call Request.send(). You don't want to miss
that onComplete event under any circumstances- the event handler has
to be in place before you make the request.  

But say that while you are prototyping you realize the computation of the
value "af" is needed elsewhere. Damn. You can't reuse the code you've
written here because the computation of value2 cannot placed in it's
own function without duplicating code- the waiting logic for a and b
that is shared by the computing of value1 and value2. As your
requirements become more complex your code won't scale.

This clearly illustrates that traditional style AJAX requests cannot
be composed. 

Which leaves one to wonder? Can something be done about this or are
we doomed to write complex hard to maintain callbacks. Another
downside about callback is that they force people who wish to extend
your code with the intention of making their own code extendable will
have to provide a callback argument in their function
interface. There's no way to solve this, callback's on function
interfaces are viral!

Hmm...

Is it impossible that requests can be written in such a way that we
can compose them? While there have been several attempts to do such a
thing many of the solutions require the programmer to adopt a library
that is painfully "non-webby" or one that transforms your JavaScript
into a fairly undebuggable form.

Promises provide a simple JavaScript-ish solution to this problem that
is easy to port to other JavaScript libraries (Prototype, jQuery,
etc.).

So what are Promises? Promises are objects that represent unrealized
values. They encapsulate the request. When you request the value of
resource a, a Promise will fetch that resource and fire an event
"realized" with its realized value when the request is complete.

Now by itself this doesn't sound very useful. It's just a wrapper around
Request that doesn't do anything. This is where decorators come in. I
suggest reading the following article about decorators in
Python. 

Basically a decorator simply wraps a functions with new
functionality.  Decorators can be used for handy things like type
checking a arguments to a functions, JSON.encoding all of a function's
return values, etc.

The Promises library provides a decorate called promise that does something very
intersting:

1. If a function returns a Request instance it will automatically be
   converted into a Promise. This does not mean a request will be
   made. Promises are "lazy". They will not be realized unless they
   cross the function interface of a promise decorated function.

2. A function arguments will checked to see if any unrealized Promises
   were passed. If so, the function blocks until those Promises have
   been realized. If a realized Promises returns an unrealized Promise
   as a value, the function will continue to block.

3. This means all arguments inside of promise decorated function will
   be guaranteed to be realized. The upside is that you call these
   functions with non-Promise arguments and they will work just fine.

Enough talk, here's an example:

  var get = function(rsrc) 
  {
    return new Request({
      method: 'get',
      url: rsrc+'.json'
    });
  }.decorate(promise)

  var fnB = function(a, b)
  {
    var p = get(b);
    return p.op(function(value) { return a + value; });
  }.decorate(promise)

  var show = function show(arg)
  {
    console.log(arg);
  }.decorate(promise)

  show(fnB(fnB(fnB(fnB(fnB(get('a'), 'b'), 'c'), 'd'), 'e'), 'f'))

Notice we have no callbacks. When we run this code will print "abcdef"
to the JavaScript console. In traditional AJAX programming there is just
no way to express the above succintly.

Also note the use of Promise.op.

1. Promise.op allows you to modify the value of a Promise.

2. If a Promise is unrealized Proimse.op returns the Promise.

3. If realized Promise.op returns the value after the op is applied.

4. Before the Promise fires it's realized event all ops that were
   queued up will be applied first.


Other Notes & Caveats
---------------------

There are some debugging dangers to take note of when using
promises. If you've done any programming in a language that supports
lazy datastructures you know the kind of trouble you can get
to. 

You might find that errors occur in places much further down
the line then you'd expect. I'll try to improve the error reporting
capabilities of Promises, but in general I imagine Promises will be
most effective in a codebase that unit tests promise decorated
functions. 

Again, the benefit or Promises is that if your functions
pass unit tests with regular arguments, they are guaranteed to work
with values coming from asynchronous requests!

This is another BIG benefit of Promises. You can unit test your code
as regular code not as asynchronous code.

Be careful of modifying a promise via op after you've passed it on to
another function. JavaScript is mutable language- if you give ops to a
Promise after you've handed it, you find that you get very weird
results from your functions. If you treats Promises as immutable
quantities you'll avoid monstrous bugs in your code as well as have a
robust full concurrent client side JavaScript application.

Rules of thumb:

1. At the creation site of Promise you can modify the Promise at will.
2. As soon as Promise is sent to another function, you call op at your peril.

Another thing to watch out for is that code that uses promises is not
deterministic. You have to be aware of that fact when using functions
that return promises:

  var MyClass = new Class({

    loadResource: function(rsrc)
    {
      return new Request({
         url: ...,
         method: 'get'
      });
    }.decorate(promise),

    doA: funtion()
    {
    }.decorate(promise),

    doB: function()
    {
    }.decorate(proimse),

    myMethod: function() 
    {
      this.doA(this.loadResource(...));
      this.doB(this.loadResource(...));
    }

  })

doA should not depend on the behavior of doB at all. When coding without
promises you would know that if you changed something in doA that
change would appear doB because you called doA first. Using promises
is very much like writing code with threads. You have no such guarantees.

Use Cases
---------

  Without Promises
  ----------------
 
  var MyClass = new Class({
 
    initialize: function(el, options)
    {
      this.setOptions(...);
      
      if(this.options.cssFiles)
      {
        var reqs = this.options.cssFiles.map(this.getFile.bind(this));
        var group = new Group(reqs);
        group.addEvent('onComplete', function() {
          this.show(reqs.map(function(req) { return req.responseText; }));
        }.bind(this);
        reqs.each(function(req) { req.send(); });
      }
      else
      {
        this.show();
      }
    },
 
    getFile: function(url)
    {
      return new Request({
        url: url,
        method: 'get'
      });
    },
 
    show: function(cssFiles)
    {
      if(css) this.addCssFiles(cssFiles);
      ...
    }

 });


 With Promises
 -------------
 
 var MyClass = new Class({
 
   initialize: function(el, options)
   {
     this.setOptions(...);
     
     var p = null;
     if(this.options.cssFiles)
     {
        p = new Promise(this.options.cssFiles.map(this.getFile));
     }
     
     this.show(p);
   },
 
   getFile: function(url)
   {
     return new Request({
       url: url
       method: 'get'
     });
   }.decorate(promise),
 
   show: function(cssFiles)
   {
      if(css) this.addCSS(cssFiles);
      ...
   }.decorate(promise)
 
 );


The Promises version here has several advantages. We don't need to use
Group. We don't need to send the requests after the addition of the
onComplete handler. We don't need to create a closure to map the
requests to their responseText values. We don't need to call show in
two different locations. 

Now imagine that you decide that show needs to take another
asynchronous parameter- like an html fragment. This means creating
another closure, a separate send, and another request -> responseText
operation. 


  if(this.options.cssFiles)
  {
    var reqs = this.options.cssFiles.map(this.getFile.bind(this));
    var html = this.getFile("foo.html"); // need a closure
    reqs.push(html); // add it to the requests list
    var group = new Group(reqs);
    group.addEvent('onComplete', function() {
      this.show(reqs.map(function(req) { return req.responseText; }),
      html.responseText); // need to convert to responseText
    }.bind(this);
    reqs.each(function(req) { req.send(); });
  }


With Promises this will require only adding a single line.


  var p = null;
  if(this.options.cssFiles)
  {
    p = new Promise(this.options.cssFiles.map(this.getFile));
  }
  
  this.show(p, this.getFile("foo.html")); // the only change


Hopefully you're beginning to see that regular requests cannot be composed
and Promises can. Without Promises you have to manage a lot of request
logic by hand.




    

     
